# DuckHerald CI/CD 파이프라인
name: DuckHerald CI/CD

# 트리거 설정: main 브랜치에 푸시, PR 생성 시 실행
on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

# 작업 정의
jobs:
  # 백엔드 빌드 및 테스트
  backend:
    runs-on: ubuntu-latest

    steps:
      # 소스코드 체크아웃
      - uses: actions/checkout@v3

      # JDK 17 설정 (Spring Boot 3 요구사항)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: "17"
          distribution: "temurin"
          cache: "gradle"

      # 백엔드 빌드
      - name: Build with Gradle
        run: |
          cd backend
          chmod +x ./gradlew
          ./gradlew build -x test

      # 백엔드 테스트
      - name: Run tests
        run: |
          cd backend
          ./gradlew test

      # 테스트 결과 저장
      - name: Publish test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: backend-test-results
          path: backend/build/reports/tests/

  # 프론트엔드 빌드 및 테스트
  frontend:
    runs-on: ubuntu-latest

    steps:
      # 소스코드 체크아웃
      - uses: actions/checkout@v3

      # Node.js 설정
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      # 의존성 설치
      - name: Install dependencies
        run: |
          cd frontend
          npm ci

      # API 타입 생성
      # 주의: 실제 환경에서는 백엔드 API 스키마가 필요함
      # 여기서는 백엔드가 실행되지 않으므로 스킵하거나 모킹 필요
      - name: Generate API types (Mock)
        run: |
          cd frontend
          # 실제 환경에서는 아래 주석 해제
          # npm run generate-api
          echo "API 타입 생성 단계 (CI 환경에서는 모킹 필요)"

      # 프론트엔드 빌드
      - name: Build frontend
        run: |
          cd frontend
          npm run build

      # 프론트엔드 테스트
      - name: Run tests
        run: |
          cd frontend
          npm test

      # 테스트 결과 저장
      - name: Publish test results
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: frontend-test-results
          path: frontend/coverage/

  # === 배포 단계는 현재 주석 처리 ===
  # deploy:
  #   needs: [backend, frontend]
  #   if: github.ref == 'refs/heads/main' && github.event_name == 'push'
  #   runs-on: ubuntu-latest

  #   steps:
  #     - uses: actions/checkout@v3

  #     # 배포를 위한 환경 변수 설정
  #     - name: Setup deployment environment
  #       run: |
  #         echo "Setting up deployment environment..."
  #         # 여기에 필요한 환경 변수나 설정 추가

  #     # 백엔드 빌드 결과 다운로드
  #     - name: Download backend build
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: backend-jar
  #         path: ./deploy

  #     # 프론트엔드 빌드 결과 다운로드
  #     - name: Download frontend build
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: frontend-build
  #         path: ./deploy/static

  #     # 배포 스크립트 실행 (예시)
  #     - name: Deploy to server
  #       run: |
  #         echo "Deploying application to server..."
  #         # 실제 배포 스크립트 또는 명령어를 여기에 추가
  #         # 예: 서버에 SSH 연결 후 배포 스크립트 실행
  #         # 또는 AWS, GCP 등의 클라우드 서비스 CLI 명령어 실행
