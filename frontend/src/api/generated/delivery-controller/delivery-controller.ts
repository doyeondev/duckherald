/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * DuckHerald API
 * 뉴스레터 서비스 DuckHerald의 API 문서
 * OpenAPI spec version: v1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  ApiErrorResponse,
  DeliveryDTO,
  DeliveryRequest,
  DeliveryResponse,
  GetDeliveryStats200,
  SendNewsletter200,
  SendNewsletterAsync200,
  SendNewsletterJson200,
  SendTestEmail200,
  SendTestEmailParams,
  TestSendNewsletter200,
  TestSendNewsletterParams,
} from "../../../types/api";
import { customInstance } from "../../../lib/apiClient";

export const testSendNewsletter = (params: TestSendNewsletterParams) => {
  return customInstance<TestSendNewsletter200>({
    url: `/api/delivery/test-send`,
    method: "POST",
    params,
  });
};

export const getTestSendNewsletterMutationOptions = <
  TError = ApiErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof testSendNewsletter>>,
    TError,
    { params: TestSendNewsletterParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof testSendNewsletter>>,
  TError,
  { params: TestSendNewsletterParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof testSendNewsletter>>,
    { params: TestSendNewsletterParams }
  > = (props) => {
    const { params } = props ?? {};

    return testSendNewsletter(params);
  };

  return { mutationFn, ...mutationOptions };
};

export type TestSendNewsletterMutationResult = NonNullable<
  Awaited<ReturnType<typeof testSendNewsletter>>
>;

export type TestSendNewsletterMutationError = ApiErrorResponse;

export const useTestSendNewsletter = <
  TError = ApiErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof testSendNewsletter>>,
    TError,
    { params: TestSendNewsletterParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof testSendNewsletter>>,
  TError,
  { params: TestSendNewsletterParams },
  TContext
> => {
  const mutationOptions = getTestSendNewsletterMutationOptions(options);

  return useMutation(mutationOptions);
};
export const sendTestEmail = (params: SendTestEmailParams) => {
  return customInstance<SendTestEmail200>({
    url: `/api/delivery/test-email`,
    method: "POST",
    params,
  });
};

export const getSendTestEmailMutationOptions = <
  TError = ApiErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof sendTestEmail>>,
    TError,
    { params: SendTestEmailParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof sendTestEmail>>,
  TError,
  { params: SendTestEmailParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof sendTestEmail>>,
    { params: SendTestEmailParams }
  > = (props) => {
    const { params } = props ?? {};

    return sendTestEmail(params);
  };

  return { mutationFn, ...mutationOptions };
};

export type SendTestEmailMutationResult = NonNullable<
  Awaited<ReturnType<typeof sendTestEmail>>
>;

export type SendTestEmailMutationError = ApiErrorResponse;

export const useSendTestEmail = <
  TError = ApiErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof sendTestEmail>>,
    TError,
    { params: SendTestEmailParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof sendTestEmail>>,
  TError,
  { params: SendTestEmailParams },
  TContext
> => {
  const mutationOptions = getSendTestEmailMutationOptions(options);

  return useMutation(mutationOptions);
};
export const sendNewsletterJson = (deliveryRequest: DeliveryRequest) => {
  return customInstance<SendNewsletterJson200>({
    url: `/api/delivery/send`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: deliveryRequest,
  });
};

export const getSendNewsletterJsonMutationOptions = <
  TError = ApiErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof sendNewsletterJson>>,
    TError,
    { data: DeliveryRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof sendNewsletterJson>>,
  TError,
  { data: DeliveryRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof sendNewsletterJson>>,
    { data: DeliveryRequest }
  > = (props) => {
    const { data } = props ?? {};

    return sendNewsletterJson(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type SendNewsletterJsonMutationResult = NonNullable<
  Awaited<ReturnType<typeof sendNewsletterJson>>
>;
export type SendNewsletterJsonMutationBody = DeliveryRequest;
export type SendNewsletterJsonMutationError = ApiErrorResponse;

export const useSendNewsletterJson = <
  TError = ApiErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof sendNewsletterJson>>,
    TError,
    { data: DeliveryRequest },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof sendNewsletterJson>>,
  TError,
  { data: DeliveryRequest },
  TContext
> => {
  const mutationOptions = getSendNewsletterJsonMutationOptions(options);

  return useMutation(mutationOptions);
};
export const sendNewsletter = (id: number) => {
  return customInstance<SendNewsletter200>({
    url: `/api/delivery/newsletters/${id}/send`,
    method: "POST",
  });
};

export const getSendNewsletterMutationOptions = <
  TError = ApiErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof sendNewsletter>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof sendNewsletter>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof sendNewsletter>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return sendNewsletter(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type SendNewsletterMutationResult = NonNullable<
  Awaited<ReturnType<typeof sendNewsletter>>
>;

export type SendNewsletterMutationError = ApiErrorResponse;

export const useSendNewsletter = <
  TError = ApiErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof sendNewsletter>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof sendNewsletter>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getSendNewsletterMutationOptions(options);

  return useMutation(mutationOptions);
};
export const sendNewsletterAsync = (id: number) => {
  return customInstance<SendNewsletterAsync200>({
    url: `/api/delivery/newsletters/${id}/send-async`,
    method: "POST",
  });
};

export const getSendNewsletterAsyncMutationOptions = <
  TError = ApiErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof sendNewsletterAsync>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof sendNewsletterAsync>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof sendNewsletterAsync>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return sendNewsletterAsync(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type SendNewsletterAsyncMutationResult = NonNullable<
  Awaited<ReturnType<typeof sendNewsletterAsync>>
>;

export type SendNewsletterAsyncMutationError = ApiErrorResponse;

export const useSendNewsletterAsync = <
  TError = ApiErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof sendNewsletterAsync>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof sendNewsletterAsync>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getSendNewsletterAsyncMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getAllDeliveryLogs = (signal?: AbortSignal) => {
  return customInstance<DeliveryResponse[]>({
    url: `/api/delivery`,
    method: "GET",
    signal,
  });
};

export const getGetAllDeliveryLogsQueryKey = () => {
  return [`/api/delivery`] as const;
};

export const getGetAllDeliveryLogsQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllDeliveryLogs>>,
  TError = ApiErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getAllDeliveryLogs>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllDeliveryLogsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAllDeliveryLogs>>
  > = ({ signal }) => getAllDeliveryLogs(signal);

  return {
    queryKey,
    queryFn,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllDeliveryLogs>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAllDeliveryLogsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllDeliveryLogs>>
>;
export type GetAllDeliveryLogsQueryError = ApiErrorResponse;

export const useGetAllDeliveryLogs = <
  TData = Awaited<ReturnType<typeof getAllDeliveryLogs>>,
  TError = ApiErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getAllDeliveryLogs>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetAllDeliveryLogsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const trackEmailOpen = (
  newsletterId: number,
  subscriberId: number,
  signal?: AbortSignal,
) => {
  return customInstance<string>({
    url: `/api/delivery/track/${newsletterId}/${subscriberId}`,
    method: "GET",
    signal,
  });
};

export const getTrackEmailOpenQueryKey = (
  newsletterId: number,
  subscriberId: number,
) => {
  return [`/api/delivery/track/${newsletterId}/${subscriberId}`] as const;
};

export const getTrackEmailOpenQueryOptions = <
  TData = Awaited<ReturnType<typeof trackEmailOpen>>,
  TError = ApiErrorResponse,
>(
  newsletterId: number,
  subscriberId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof trackEmailOpen>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getTrackEmailOpenQueryKey(newsletterId, subscriberId);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof trackEmailOpen>>> = ({
    signal,
  }) => trackEmailOpen(newsletterId, subscriberId, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!(newsletterId && subscriberId),
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof trackEmailOpen>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type TrackEmailOpenQueryResult = NonNullable<
  Awaited<ReturnType<typeof trackEmailOpen>>
>;
export type TrackEmailOpenQueryError = ApiErrorResponse;

export const useTrackEmailOpen = <
  TData = Awaited<ReturnType<typeof trackEmailOpen>>,
  TError = ApiErrorResponse,
>(
  newsletterId: number,
  subscriberId: number,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof trackEmailOpen>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getTrackEmailOpenQueryOptions(
    newsletterId,
    subscriberId,
    options,
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getDeliveryLogsBySubscriber = (
  id: number,
  signal?: AbortSignal,
) => {
  return customInstance<DeliveryResponse[]>({
    url: `/api/delivery/subscriber/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetDeliveryLogsBySubscriberQueryKey = (id: number) => {
  return [`/api/delivery/subscriber/${id}`] as const;
};

export const getGetDeliveryLogsBySubscriberQueryOptions = <
  TData = Awaited<ReturnType<typeof getDeliveryLogsBySubscriber>>,
  TError = ApiErrorResponse,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDeliveryLogsBySubscriber>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetDeliveryLogsBySubscriberQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDeliveryLogsBySubscriber>>
  > = ({ signal }) => getDeliveryLogsBySubscriber(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getDeliveryLogsBySubscriber>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetDeliveryLogsBySubscriberQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDeliveryLogsBySubscriber>>
>;
export type GetDeliveryLogsBySubscriberQueryError = ApiErrorResponse;

export const useGetDeliveryLogsBySubscriber = <
  TData = Awaited<ReturnType<typeof getDeliveryLogsBySubscriber>>,
  TError = ApiErrorResponse,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDeliveryLogsBySubscriber>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDeliveryLogsBySubscriberQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getDeliveryStats = (id: number, signal?: AbortSignal) => {
  return customInstance<GetDeliveryStats200>({
    url: `/api/delivery/newsletters/${id}/stats`,
    method: "GET",
    signal,
  });
};

export const getGetDeliveryStatsQueryKey = (id: number) => {
  return [`/api/delivery/newsletters/${id}/stats`] as const;
};

export const getGetDeliveryStatsQueryOptions = <
  TData = Awaited<ReturnType<typeof getDeliveryStats>>,
  TError = ApiErrorResponse,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDeliveryStats>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetDeliveryStatsQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDeliveryStats>>
  > = ({ signal }) => getDeliveryStats(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getDeliveryStats>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetDeliveryStatsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDeliveryStats>>
>;
export type GetDeliveryStatsQueryError = ApiErrorResponse;

export const useGetDeliveryStats = <
  TData = Awaited<ReturnType<typeof getDeliveryStats>>,
  TError = ApiErrorResponse,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDeliveryStats>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDeliveryStatsQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getDeliveryLogsByNewsletter = (
  id: number,
  signal?: AbortSignal,
) => {
  return customInstance<DeliveryResponse[]>({
    url: `/api/delivery/newsletter/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetDeliveryLogsByNewsletterQueryKey = (id: number) => {
  return [`/api/delivery/newsletter/${id}`] as const;
};

export const getGetDeliveryLogsByNewsletterQueryOptions = <
  TData = Awaited<ReturnType<typeof getDeliveryLogsByNewsletter>>,
  TError = ApiErrorResponse,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDeliveryLogsByNewsletter>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetDeliveryLogsByNewsletterQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getDeliveryLogsByNewsletter>>
  > = ({ signal }) => getDeliveryLogsByNewsletter(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getDeliveryLogsByNewsletter>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetDeliveryLogsByNewsletterQueryResult = NonNullable<
  Awaited<ReturnType<typeof getDeliveryLogsByNewsletter>>
>;
export type GetDeliveryLogsByNewsletterQueryError = ApiErrorResponse;

export const useGetDeliveryLogsByNewsletter = <
  TData = Awaited<ReturnType<typeof getDeliveryLogsByNewsletter>>,
  TError = ApiErrorResponse,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getDeliveryLogsByNewsletter>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetDeliveryLogsByNewsletterQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getAllDeliverySummary = (signal?: AbortSignal) => {
  return customInstance<DeliveryDTO[]>({
    url: `/api/delivery/logs`,
    method: "GET",
    signal,
  });
};

export const getGetAllDeliverySummaryQueryKey = () => {
  return [`/api/delivery/logs`] as const;
};

export const getGetAllDeliverySummaryQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllDeliverySummary>>,
  TError = ApiErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getAllDeliverySummary>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllDeliverySummaryQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAllDeliverySummary>>
  > = ({ signal }) => getAllDeliverySummary(signal);

  return {
    queryKey,
    queryFn,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllDeliverySummary>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAllDeliverySummaryQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllDeliverySummary>>
>;
export type GetAllDeliverySummaryQueryError = ApiErrorResponse;

export const useGetAllDeliverySummary = <
  TData = Awaited<ReturnType<typeof getAllDeliverySummary>>,
  TError = ApiErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getAllDeliverySummary>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetAllDeliverySummaryQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
