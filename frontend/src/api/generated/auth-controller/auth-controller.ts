/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * DuckHerald API
 * 뉴스레터 서비스 DuckHerald의 API 문서
 * OpenAPI spec version: v1.0.0
 */
import { useMutation } from "@tanstack/react-query";
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query";
import type {
  ApiErrorResponse,
  CreateAdminRequest,
  CreateAdminResponse,
  HashPassword200,
  HashPasswordRequest,
  Login200,
  LoginRequest,
  SetupAdmin200,
  SetupAdminRequest,
  TokenRequest,
  UpdateAdminPassword200,
  UpdatePasswordRequest,
  ValidateToken200,
} from "../../../types/api";
import { customInstance } from "../../../lib/apiClient";

export const validateToken = (tokenRequest: TokenRequest) => {
  return customInstance<ValidateToken200>({
    url: `/api/auth/validate-token`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: tokenRequest,
  });
};

export const getValidateTokenMutationOptions = <
  TError = ApiErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof validateToken>>,
    TError,
    { data: TokenRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof validateToken>>,
  TError,
  { data: TokenRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof validateToken>>,
    { data: TokenRequest }
  > = (props) => {
    const { data } = props ?? {};

    return validateToken(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type ValidateTokenMutationResult = NonNullable<
  Awaited<ReturnType<typeof validateToken>>
>;
export type ValidateTokenMutationBody = TokenRequest;
export type ValidateTokenMutationError = ApiErrorResponse;

export const useValidateToken = <
  TError = ApiErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof validateToken>>,
    TError,
    { data: TokenRequest },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof validateToken>>,
  TError,
  { data: TokenRequest },
  TContext
> => {
  const mutationOptions = getValidateTokenMutationOptions(options);

  return useMutation(mutationOptions);
};
export const login = (loginRequest: LoginRequest) => {
  return customInstance<Login200>({
    url: `/api/auth/login`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: loginRequest,
  });
};

export const getLoginMutationOptions = <
  TError = ApiErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof login>>,
    TError,
    { data: LoginRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof login>>,
  TError,
  { data: LoginRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof login>>,
    { data: LoginRequest }
  > = (props) => {
    const { data } = props ?? {};

    return login(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type LoginMutationResult = NonNullable<
  Awaited<ReturnType<typeof login>>
>;
export type LoginMutationBody = LoginRequest;
export type LoginMutationError = ApiErrorResponse;

export const useLogin = <
  TError = ApiErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof login>>,
    TError,
    { data: LoginRequest },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof login>>,
  TError,
  { data: LoginRequest },
  TContext
> => {
  const mutationOptions = getLoginMutationOptions(options);

  return useMutation(mutationOptions);
};
export const updateAdminPassword = (
  updatePasswordRequest: UpdatePasswordRequest,
) => {
  return customInstance<UpdateAdminPassword200>({
    url: `/api/auth/admin/update-password`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: updatePasswordRequest,
  });
};

export const getUpdateAdminPasswordMutationOptions = <
  TError = ApiErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateAdminPassword>>,
    TError,
    { data: UpdatePasswordRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateAdminPassword>>,
  TError,
  { data: UpdatePasswordRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateAdminPassword>>,
    { data: UpdatePasswordRequest }
  > = (props) => {
    const { data } = props ?? {};

    return updateAdminPassword(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateAdminPasswordMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateAdminPassword>>
>;
export type UpdateAdminPasswordMutationBody = UpdatePasswordRequest;
export type UpdateAdminPasswordMutationError = ApiErrorResponse;

export const useUpdateAdminPassword = <
  TError = ApiErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateAdminPassword>>,
    TError,
    { data: UpdatePasswordRequest },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateAdminPassword>>,
  TError,
  { data: UpdatePasswordRequest },
  TContext
> => {
  const mutationOptions = getUpdateAdminPasswordMutationOptions(options);

  return useMutation(mutationOptions);
};
export const setupAdmin = (setupAdminRequest: SetupAdminRequest) => {
  return customInstance<SetupAdmin200>({
    url: `/api/auth/admin/setup`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: setupAdminRequest,
  });
};

export const getSetupAdminMutationOptions = <
  TError = ApiErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof setupAdmin>>,
    TError,
    { data: SetupAdminRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof setupAdmin>>,
  TError,
  { data: SetupAdminRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof setupAdmin>>,
    { data: SetupAdminRequest }
  > = (props) => {
    const { data } = props ?? {};

    return setupAdmin(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type SetupAdminMutationResult = NonNullable<
  Awaited<ReturnType<typeof setupAdmin>>
>;
export type SetupAdminMutationBody = SetupAdminRequest;
export type SetupAdminMutationError = ApiErrorResponse;

export const useSetupAdmin = <
  TError = ApiErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof setupAdmin>>,
    TError,
    { data: SetupAdminRequest },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof setupAdmin>>,
  TError,
  { data: SetupAdminRequest },
  TContext
> => {
  const mutationOptions = getSetupAdminMutationOptions(options);

  return useMutation(mutationOptions);
};
export const hashPassword = (hashPasswordRequest: HashPasswordRequest) => {
  return customInstance<HashPassword200>({
    url: `/api/auth/admin/hash-password`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: hashPasswordRequest,
  });
};

export const getHashPasswordMutationOptions = <
  TError = ApiErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof hashPassword>>,
    TError,
    { data: HashPasswordRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof hashPassword>>,
  TError,
  { data: HashPasswordRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof hashPassword>>,
    { data: HashPasswordRequest }
  > = (props) => {
    const { data } = props ?? {};

    return hashPassword(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type HashPasswordMutationResult = NonNullable<
  Awaited<ReturnType<typeof hashPassword>>
>;
export type HashPasswordMutationBody = HashPasswordRequest;
export type HashPasswordMutationError = ApiErrorResponse;

export const useHashPassword = <
  TError = ApiErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof hashPassword>>,
    TError,
    { data: HashPasswordRequest },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof hashPassword>>,
  TError,
  { data: HashPasswordRequest },
  TContext
> => {
  const mutationOptions = getHashPasswordMutationOptions(options);

  return useMutation(mutationOptions);
};
export const createAdmin = (createAdminRequest: CreateAdminRequest) => {
  return customInstance<CreateAdminResponse>({
    url: `/api/auth/admin/create`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createAdminRequest,
  });
};

export const getCreateAdminMutationOptions = <
  TError = ApiErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createAdmin>>,
    TError,
    { data: CreateAdminRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createAdmin>>,
  TError,
  { data: CreateAdminRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createAdmin>>,
    { data: CreateAdminRequest }
  > = (props) => {
    const { data } = props ?? {};

    return createAdmin(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateAdminMutationResult = NonNullable<
  Awaited<ReturnType<typeof createAdmin>>
>;
export type CreateAdminMutationBody = CreateAdminRequest;
export type CreateAdminMutationError = ApiErrorResponse;

export const useCreateAdmin = <
  TError = ApiErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createAdmin>>,
    TError,
    { data: CreateAdminRequest },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof createAdmin>>,
  TError,
  { data: CreateAdminRequest },
  TContext
> => {
  const mutationOptions = getCreateAdminMutationOptions(options);

  return useMutation(mutationOptions);
};
