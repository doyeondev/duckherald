/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * DuckHerald API
 * 뉴스레터 서비스 DuckHerald의 API 문서
 * OpenAPI spec version: v1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  ApiErrorResponse,
  GetSubscriberStats200,
  SubscriberResponse,
  UpdateSubscriberStatusParams,
} from "../../../types/api";
import { customInstance } from "../../../lib/apiClient";

export const updateSubscriberStatus = (
  id: number,
  params: UpdateSubscriberStatusParams,
) => {
  return customInstance<SubscriberResponse>({
    url: `/api/admin/subscribers/${id}/status`,
    method: "PUT",
    params,
  });
};

export const getUpdateSubscriberStatusMutationOptions = <
  TError = ApiErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateSubscriberStatus>>,
    TError,
    { id: number; params: UpdateSubscriberStatusParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateSubscriberStatus>>,
  TError,
  { id: number; params: UpdateSubscriberStatusParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateSubscriberStatus>>,
    { id: number; params: UpdateSubscriberStatusParams }
  > = (props) => {
    const { id, params } = props ?? {};

    return updateSubscriberStatus(id, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateSubscriberStatusMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateSubscriberStatus>>
>;

export type UpdateSubscriberStatusMutationError = ApiErrorResponse;

export const useUpdateSubscriberStatus = <
  TError = ApiErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateSubscriberStatus>>,
    TError,
    { id: number; params: UpdateSubscriberStatusParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateSubscriberStatus>>,
  TError,
  { id: number; params: UpdateSubscriberStatusParams },
  TContext
> => {
  const mutationOptions = getUpdateSubscriberStatusMutationOptions(options);

  return useMutation(mutationOptions);
};
export const getAllSubscribers = (signal?: AbortSignal) => {
  return customInstance<SubscriberResponse[]>({
    url: `/api/admin/subscribers`,
    method: "GET",
    signal,
  });
};

export const getGetAllSubscribersQueryKey = () => {
  return [`/api/admin/subscribers`] as const;
};

export const getGetAllSubscribersQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllSubscribers>>,
  TError = ApiErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getAllSubscribers>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetAllSubscribersQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAllSubscribers>>
  > = ({ signal }) => getAllSubscribers(signal);

  return {
    queryKey,
    queryFn,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllSubscribers>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAllSubscribersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllSubscribers>>
>;
export type GetAllSubscribersQueryError = ApiErrorResponse;

export const useGetAllSubscribers = <
  TData = Awaited<ReturnType<typeof getAllSubscribers>>,
  TError = ApiErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getAllSubscribers>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetAllSubscribersQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getSubscriberStats = (signal?: AbortSignal) => {
  return customInstance<GetSubscriberStats200>({
    url: `/api/admin/subscribers/stats`,
    method: "GET",
    signal,
  });
};

export const getGetSubscriberStatsQueryKey = () => {
  return [`/api/admin/subscribers/stats`] as const;
};

export const getGetSubscriberStatsQueryOptions = <
  TData = Awaited<ReturnType<typeof getSubscriberStats>>,
  TError = ApiErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getSubscriberStats>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetSubscriberStatsQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getSubscriberStats>>
  > = ({ signal }) => getSubscriberStats(signal);

  return {
    queryKey,
    queryFn,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getSubscriberStats>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetSubscriberStatsQueryResult = NonNullable<
  Awaited<ReturnType<typeof getSubscriberStats>>
>;
export type GetSubscriberStatsQueryError = ApiErrorResponse;

export const useGetSubscriberStats = <
  TData = Awaited<ReturnType<typeof getSubscriberStats>>,
  TError = ApiErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getSubscriberStats>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetSubscriberStatsQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getAllDeletedSubscribers = (signal?: AbortSignal) => {
  return customInstance<SubscriberResponse[]>({
    url: `/api/admin/subscribers/deleted`,
    method: "GET",
    signal,
  });
};

export const getGetAllDeletedSubscribersQueryKey = () => {
  return [`/api/admin/subscribers/deleted`] as const;
};

export const getGetAllDeletedSubscribersQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllDeletedSubscribers>>,
  TError = ApiErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getAllDeletedSubscribers>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetAllDeletedSubscribersQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAllDeletedSubscribers>>
  > = ({ signal }) => getAllDeletedSubscribers(signal);

  return {
    queryKey,
    queryFn,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllDeletedSubscribers>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAllDeletedSubscribersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllDeletedSubscribers>>
>;
export type GetAllDeletedSubscribersQueryError = ApiErrorResponse;

export const useGetAllDeletedSubscribers = <
  TData = Awaited<ReturnType<typeof getAllDeletedSubscribers>>,
  TError = ApiErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getAllDeletedSubscribers>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetAllDeletedSubscribersQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getAllActiveSubscribers = (signal?: AbortSignal) => {
  return customInstance<SubscriberResponse[]>({
    url: `/api/admin/subscribers/active`,
    method: "GET",
    signal,
  });
};

export const getGetAllActiveSubscribersQueryKey = () => {
  return [`/api/admin/subscribers/active`] as const;
};

export const getGetAllActiveSubscribersQueryOptions = <
  TData = Awaited<ReturnType<typeof getAllActiveSubscribers>>,
  TError = ApiErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getAllActiveSubscribers>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetAllActiveSubscribersQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getAllActiveSubscribers>>
  > = ({ signal }) => getAllActiveSubscribers(signal);

  return {
    queryKey,
    queryFn,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getAllActiveSubscribers>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetAllActiveSubscribersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getAllActiveSubscribers>>
>;
export type GetAllActiveSubscribersQueryError = ApiErrorResponse;

export const useGetAllActiveSubscribers = <
  TData = Awaited<ReturnType<typeof getAllActiveSubscribers>>,
  TError = ApiErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getAllActiveSubscribers>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetAllActiveSubscribersQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const deleteSubscriber = (id: number) => {
  return customInstance<void>({
    url: `/api/admin/subscribers/${id}`,
    method: "DELETE",
  });
};

export const getDeleteSubscriberMutationOptions = <
  TError = ApiErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteSubscriber>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteSubscriber>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteSubscriber>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteSubscriber(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteSubscriberMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteSubscriber>>
>;

export type DeleteSubscriberMutationError = ApiErrorResponse;

export const useDeleteSubscriber = <
  TError = ApiErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteSubscriber>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteSubscriber>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteSubscriberMutationOptions(options);

  return useMutation(mutationOptions);
};
