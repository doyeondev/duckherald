/**
 * Generated by orval v6.31.0 üç∫
 * Do not edit manually.
 * DuckHerald API
 * Îâ¥Ïä§Î†àÌÑ∞ ÏÑúÎπÑÏä§ DuckHeraldÏùò API Î¨∏ÏÑú
 * OpenAPI spec version: v1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  ApiErrorResponse,
  GetNewslettersParams,
  NewsletterRequest,
  NewsletterResponse,
} from "../../../types/api";
import { customInstance } from "../../../lib/apiClient";

/**
 * Îâ¥Ïä§Î†àÌÑ∞Î•º ÏûÑÏãú Ï†ÄÏû•(DRAFT) ÏÉÅÌÉúÎ°ú Ï†ÄÏû•Ìï©ÎãàÎã§.
 * @summary Îâ¥Ïä§Î†àÌÑ∞ ÏûÑÏãú Ï†ÄÏû•
 */
export const saveDraft = (newsletterRequest: NewsletterRequest) => {
  return customInstance<NewsletterResponse>({
    url: `/api/newsletters/save-draft`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: newsletterRequest,
  });
};

export const getSaveDraftMutationOptions = <
  TError = ApiErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof saveDraft>>,
    TError,
    { data: NewsletterRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof saveDraft>>,
  TError,
  { data: NewsletterRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof saveDraft>>,
    { data: NewsletterRequest }
  > = (props) => {
    const { data } = props ?? {};

    return saveDraft(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type SaveDraftMutationResult = NonNullable<
  Awaited<ReturnType<typeof saveDraft>>
>;
export type SaveDraftMutationBody = NewsletterRequest;
export type SaveDraftMutationError = ApiErrorResponse;

/**
 * @summary Îâ¥Ïä§Î†àÌÑ∞ ÏûÑÏãú Ï†ÄÏû•
 */
export const useSaveDraft = <
  TError = ApiErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof saveDraft>>,
    TError,
    { data: NewsletterRequest },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof saveDraft>>,
  TError,
  { data: NewsletterRequest },
  TContext
> => {
  const mutationOptions = getSaveDraftMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * ÏÉà Îâ¥Ïä§Î†àÌÑ∞Î•º ÏÉùÏÑ±ÌïòÍ≥† Î∞úÌñâ ÏÉÅÌÉúÎ°ú ÏÑ§Ï†ïÌï©ÎãàÎã§.
 * @summary Îâ¥Ïä§Î†àÌÑ∞ ÏÉùÏÑ±
 */
export const createNewsletter = (newsletterRequest: NewsletterRequest) => {
  return customInstance<NewsletterResponse>({
    url: `/api/newsletters/create-json`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: newsletterRequest,
  });
};

export const getCreateNewsletterMutationOptions = <
  TError = ApiErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createNewsletter>>,
    TError,
    { data: NewsletterRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createNewsletter>>,
  TError,
  { data: NewsletterRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createNewsletter>>,
    { data: NewsletterRequest }
  > = (props) => {
    const { data } = props ?? {};

    return createNewsletter(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateNewsletterMutationResult = NonNullable<
  Awaited<ReturnType<typeof createNewsletter>>
>;
export type CreateNewsletterMutationBody = NewsletterRequest;
export type CreateNewsletterMutationError = ApiErrorResponse;

/**
 * @summary Îâ¥Ïä§Î†àÌÑ∞ ÏÉùÏÑ±
 */
export const useCreateNewsletter = <
  TError = ApiErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createNewsletter>>,
    TError,
    { data: NewsletterRequest },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof createNewsletter>>,
  TError,
  { data: NewsletterRequest },
  TContext
> => {
  const mutationOptions = getCreateNewsletterMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * Î™®Îì† Îâ¥Ïä§Î†àÌÑ∞ Î™©Î°ùÏùÑ Ï°∞ÌöåÌïòÍ±∞ÎÇò status ÌååÎùºÎØ∏ÌÑ∞Î°ú ÌïÑÌÑ∞ÎßÅÌï©ÎãàÎã§.
 * @summary Îâ¥Ïä§Î†àÌÑ∞ Î™©Î°ù Ï°∞Ìöå
 */
export const getNewsletters = (
  params?: GetNewslettersParams,
  signal?: AbortSignal,
) => {
  return customInstance<NewsletterResponse>({
    url: `/api/newsletters`,
    method: "GET",
    params,
    signal,
  });
};

export const getGetNewslettersQueryKey = (params?: GetNewslettersParams) => {
  return [`/api/newsletters`, ...(params ? [params] : [])] as const;
};

export const getGetNewslettersQueryOptions = <
  TData = Awaited<ReturnType<typeof getNewsletters>>,
  TError = ApiErrorResponse,
>(
  params?: GetNewslettersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getNewsletters>>, TError, TData>
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetNewslettersQueryKey(params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof getNewsletters>>> = ({
    signal,
  }) => getNewsletters(params, signal);

  return {
    queryKey,
    queryFn,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getNewsletters>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetNewslettersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getNewsletters>>
>;
export type GetNewslettersQueryError = ApiErrorResponse;

/**
 * @summary Îâ¥Ïä§Î†àÌÑ∞ Î™©Î°ù Ï°∞Ìöå
 */
export const useGetNewsletters = <
  TData = Awaited<ReturnType<typeof getNewsletters>>,
  TError = ApiErrorResponse,
>(
  params?: GetNewslettersParams,
  options?: {
    query?: Partial<
      UseQueryOptions<Awaited<ReturnType<typeof getNewsletters>>, TError, TData>
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetNewslettersQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * IDÎ°ú ÌäπÏ†ï Îâ¥Ïä§Î†àÌÑ∞Ïùò ÏÉÅÏÑ∏ Ï†ïÎ≥¥Î•º Ï°∞ÌöåÌï©ÎãàÎã§.
 * @summary ÌäπÏ†ï Îâ¥Ïä§Î†àÌÑ∞ Ï°∞Ìöå
 */
export const getNewsletterById = (id: number, signal?: AbortSignal) => {
  return customInstance<NewsletterResponse>({
    url: `/api/newsletters/${id}`,
    method: "GET",
    signal,
  });
};

export const getGetNewsletterByIdQueryKey = (id: number) => {
  return [`/api/newsletters/${id}`] as const;
};

export const getGetNewsletterByIdQueryOptions = <
  TData = Awaited<ReturnType<typeof getNewsletterById>>,
  TError = ApiErrorResponse,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getNewsletterById>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getGetNewsletterByIdQueryKey(id);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getNewsletterById>>
  > = ({ signal }) => getNewsletterById(id, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!id,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getNewsletterById>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetNewsletterByIdQueryResult = NonNullable<
  Awaited<ReturnType<typeof getNewsletterById>>
>;
export type GetNewsletterByIdQueryError = ApiErrorResponse;

/**
 * @summary ÌäπÏ†ï Îâ¥Ïä§Î†àÌÑ∞ Ï°∞Ìöå
 */
export const useGetNewsletterById = <
  TData = Awaited<ReturnType<typeof getNewsletterById>>,
  TError = ApiErrorResponse,
>(
  id: number,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getNewsletterById>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetNewsletterByIdQueryOptions(id, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * ÌäπÏ†ï ÏÉÅÌÉúÏùò Îâ¥Ïä§Î†àÌÑ∞ Î™©Î°ùÏùÑ Ï°∞ÌöåÌï©ÎãàÎã§.
 * @summary ÏÉÅÌÉúÎ≥Ñ Îâ¥Ïä§Î†àÌÑ∞ Ï°∞Ìöå
 */
export const getNewslettersByStatus = (
  status: string,
  signal?: AbortSignal,
) => {
  return customInstance<NewsletterResponse[]>({
    url: `/api/newsletters/status/${status}`,
    method: "GET",
    signal,
  });
};

export const getGetNewslettersByStatusQueryKey = (status: string) => {
  return [`/api/newsletters/status/${status}`] as const;
};

export const getGetNewslettersByStatusQueryOptions = <
  TData = Awaited<ReturnType<typeof getNewslettersByStatus>>,
  TError = ApiErrorResponse,
>(
  status: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getNewslettersByStatus>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetNewslettersByStatusQueryKey(status);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getNewslettersByStatus>>
  > = ({ signal }) => getNewslettersByStatus(status, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!status,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getNewslettersByStatus>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetNewslettersByStatusQueryResult = NonNullable<
  Awaited<ReturnType<typeof getNewslettersByStatus>>
>;
export type GetNewslettersByStatusQueryError = ApiErrorResponse;

/**
 * @summary ÏÉÅÌÉúÎ≥Ñ Îâ¥Ïä§Î†àÌÑ∞ Ï°∞Ìöå
 */
export const useGetNewslettersByStatus = <
  TData = Awaited<ReturnType<typeof getNewslettersByStatus>>,
  TError = ApiErrorResponse,
>(
  status: string,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof getNewslettersByStatus>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetNewslettersByStatusQueryOptions(status, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * ÏÉÅÌÉúÍ∞Ä PUBLISHEDÏù∏ Îâ¥Ïä§Î†àÌÑ∞Îßå Ï°∞ÌöåÌï©ÎãàÎã§.
 * @summary Î∞úÌñâÎêú Îâ¥Ïä§Î†àÌÑ∞ Î™©Î°ù Ï°∞Ìöå
 */
export const getPublishedNewsletters = (signal?: AbortSignal) => {
  return customInstance<NewsletterResponse[]>({
    url: `/api/newsletters/published`,
    method: "GET",
    signal,
  });
};

export const getGetPublishedNewslettersQueryKey = () => {
  return [`/api/newsletters/published`] as const;
};

export const getGetPublishedNewslettersQueryOptions = <
  TData = Awaited<ReturnType<typeof getPublishedNewsletters>>,
  TError = ApiErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getPublishedNewsletters>>,
      TError,
      TData
    >
  >;
}) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getGetPublishedNewslettersQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof getPublishedNewsletters>>
  > = ({ signal }) => getPublishedNewsletters(signal);

  return {
    queryKey,
    queryFn,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof getPublishedNewsletters>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type GetPublishedNewslettersQueryResult = NonNullable<
  Awaited<ReturnType<typeof getPublishedNewsletters>>
>;
export type GetPublishedNewslettersQueryError = ApiErrorResponse;

/**
 * @summary Î∞úÌñâÎêú Îâ¥Ïä§Î†àÌÑ∞ Î™©Î°ù Ï°∞Ìöå
 */
export const useGetPublishedNewsletters = <
  TData = Awaited<ReturnType<typeof getPublishedNewsletters>>,
  TError = ApiErrorResponse,
>(options?: {
  query?: Partial<
    UseQueryOptions<
      Awaited<ReturnType<typeof getPublishedNewsletters>>,
      TError,
      TData
    >
  >;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getGetPublishedNewslettersQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
