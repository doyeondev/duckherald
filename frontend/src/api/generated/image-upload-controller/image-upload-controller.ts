/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * DuckHerald API
 * 뉴스레터 서비스 DuckHerald의 API 문서
 * OpenAPI spec version: v1.0.0
 */
import { useMutation } from "@tanstack/react-query";
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query";
import type {
  ApiErrorResponse,
  UploadImageBody,
  UploadImageParams,
} from "../../../types/api";
import { customInstance } from "../../../lib/apiClient";

export const uploadImage = (
  uploadImageBody: UploadImageBody,
  params?: UploadImageParams,
) => {
  return customInstance<string>({
    url: `/api/newsletters/images/upload`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: uploadImageBody,
    params,
  });
};

export const getUploadImageMutationOptions = <
  TError = ApiErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof uploadImage>>,
    TError,
    { data: UploadImageBody; params?: UploadImageParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof uploadImage>>,
  TError,
  { data: UploadImageBody; params?: UploadImageParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof uploadImage>>,
    { data: UploadImageBody; params?: UploadImageParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return uploadImage(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type UploadImageMutationResult = NonNullable<
  Awaited<ReturnType<typeof uploadImage>>
>;
export type UploadImageMutationBody = UploadImageBody;
export type UploadImageMutationError = ApiErrorResponse;

export const useUploadImage = <
  TError = ApiErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof uploadImage>>,
    TError,
    { data: UploadImageBody; params?: UploadImageParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof uploadImage>>,
  TError,
  { data: UploadImageBody; params?: UploadImageParams },
  TContext
> => {
  const mutationOptions = getUploadImageMutationOptions(options);

  return useMutation(mutationOptions);
};
