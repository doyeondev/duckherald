/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * DuckHerald API
 * 뉴스레터 서비스 DuckHerald의 API 문서
 * OpenAPI spec version: v1.0.0
 */
import { useMutation } from "@tanstack/react-query";
import type {
  MutationFunction,
  UseMutationOptions,
  UseMutationResult,
} from "@tanstack/react-query";
import type {
  ApiErrorResponse,
  CreateNewsletterSimpleParams,
  CreateNewsletterWithMultipartBody,
  CreateNewsletterWithMultipartParams,
  NewsletterRequest,
  NewsletterResponse,
  SaveNewsletterParams,
  UploadImage1Body,
} from "../../../types/api";
import { customInstance } from "../../../lib/apiClient";

export const updateNewsletter = (
  id: number,
  newsletterRequest: NewsletterRequest,
) => {
  return customInstance<NewsletterResponse>({
    url: `/api/admin/newsletters/${id}`,
    method: "PUT",
    headers: { "Content-Type": "application/json" },
    data: newsletterRequest,
  });
};

export const getUpdateNewsletterMutationOptions = <
  TError = ApiErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateNewsletter>>,
    TError,
    { id: number; data: NewsletterRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof updateNewsletter>>,
  TError,
  { id: number; data: NewsletterRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof updateNewsletter>>,
    { id: number; data: NewsletterRequest }
  > = (props) => {
    const { id, data } = props ?? {};

    return updateNewsletter(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UpdateNewsletterMutationResult = NonNullable<
  Awaited<ReturnType<typeof updateNewsletter>>
>;
export type UpdateNewsletterMutationBody = NewsletterRequest;
export type UpdateNewsletterMutationError = ApiErrorResponse;

export const useUpdateNewsletter = <
  TError = ApiErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof updateNewsletter>>,
    TError,
    { id: number; data: NewsletterRequest },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof updateNewsletter>>,
  TError,
  { id: number; data: NewsletterRequest },
  TContext
> => {
  const mutationOptions = getUpdateNewsletterMutationOptions(options);

  return useMutation(mutationOptions);
};
export const deleteNewsletter = (id: number) => {
  return customInstance<void>({
    url: `/api/admin/newsletters/${id}`,
    method: "DELETE",
  });
};

export const getDeleteNewsletterMutationOptions = <
  TError = ApiErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteNewsletter>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof deleteNewsletter>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof deleteNewsletter>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return deleteNewsletter(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type DeleteNewsletterMutationResult = NonNullable<
  Awaited<ReturnType<typeof deleteNewsletter>>
>;

export type DeleteNewsletterMutationError = ApiErrorResponse;

export const useDeleteNewsletter = <
  TError = ApiErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof deleteNewsletter>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof deleteNewsletter>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getDeleteNewsletterMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @deprecated
 */
export const createNewsletter1 = (newsletterRequest: NewsletterRequest) => {
  return customInstance<NewsletterResponse>({
    url: `/api/admin/newsletters`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: newsletterRequest,
  });
};

export const getCreateNewsletter1MutationOptions = <
  TError = ApiErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createNewsletter1>>,
    TError,
    { data: NewsletterRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createNewsletter1>>,
  TError,
  { data: NewsletterRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createNewsletter1>>,
    { data: NewsletterRequest }
  > = (props) => {
    const { data } = props ?? {};

    return createNewsletter1(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateNewsletter1MutationResult = NonNullable<
  Awaited<ReturnType<typeof createNewsletter1>>
>;
export type CreateNewsletter1MutationBody = NewsletterRequest;
export type CreateNewsletter1MutationError = ApiErrorResponse;

/**
 * @deprecated
 */
export const useCreateNewsletter1 = <
  TError = ApiErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createNewsletter1>>,
    TError,
    { data: NewsletterRequest },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof createNewsletter1>>,
  TError,
  { data: NewsletterRequest },
  TContext
> => {
  const mutationOptions = getCreateNewsletter1MutationOptions(options);

  return useMutation(mutationOptions);
};
export const publishNewsletter = (id: number) => {
  return customInstance<NewsletterResponse>({
    url: `/api/admin/newsletters/${id}/publish`,
    method: "POST",
  });
};

export const getPublishNewsletterMutationOptions = <
  TError = ApiErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof publishNewsletter>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof publishNewsletter>>,
  TError,
  { id: number },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof publishNewsletter>>,
    { id: number }
  > = (props) => {
    const { id } = props ?? {};

    return publishNewsletter(id);
  };

  return { mutationFn, ...mutationOptions };
};

export type PublishNewsletterMutationResult = NonNullable<
  Awaited<ReturnType<typeof publishNewsletter>>
>;

export type PublishNewsletterMutationError = ApiErrorResponse;

export const usePublishNewsletter = <
  TError = ApiErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof publishNewsletter>>,
    TError,
    { id: number },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof publishNewsletter>>,
  TError,
  { id: number },
  TContext
> => {
  const mutationOptions = getPublishNewsletterMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @deprecated
 */
export const uploadImage1 = (
  id: number,
  uploadImage1Body: UploadImage1Body,
) => {
  return customInstance<string>({
    url: `/api/admin/newsletters/${id}/image`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: uploadImage1Body,
  });
};

export const getUploadImage1MutationOptions = <
  TError = ApiErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof uploadImage1>>,
    TError,
    { id: number; data: UploadImage1Body },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof uploadImage1>>,
  TError,
  { id: number; data: UploadImage1Body },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof uploadImage1>>,
    { id: number; data: UploadImage1Body }
  > = (props) => {
    const { id, data } = props ?? {};

    return uploadImage1(id, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type UploadImage1MutationResult = NonNullable<
  Awaited<ReturnType<typeof uploadImage1>>
>;
export type UploadImage1MutationBody = UploadImage1Body;
export type UploadImage1MutationError = ApiErrorResponse;

/**
 * @deprecated
 */
export const useUploadImage1 = <
  TError = ApiErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof uploadImage1>>,
    TError,
    { id: number; data: UploadImage1Body },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof uploadImage1>>,
  TError,
  { id: number; data: UploadImage1Body },
  TContext
> => {
  const mutationOptions = getUploadImage1MutationOptions(options);

  return useMutation(mutationOptions);
};
export const saveNewsletter = (
  newsletterRequest: NewsletterRequest,
  params?: SaveNewsletterParams,
) => {
  return customInstance<NewsletterResponse>({
    url: `/api/admin/newsletters/save`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: newsletterRequest,
    params,
  });
};

export const getSaveNewsletterMutationOptions = <
  TError = ApiErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof saveNewsletter>>,
    TError,
    { data: NewsletterRequest; params?: SaveNewsletterParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof saveNewsletter>>,
  TError,
  { data: NewsletterRequest; params?: SaveNewsletterParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof saveNewsletter>>,
    { data: NewsletterRequest; params?: SaveNewsletterParams }
  > = (props) => {
    const { data, params } = props ?? {};

    return saveNewsletter(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type SaveNewsletterMutationResult = NonNullable<
  Awaited<ReturnType<typeof saveNewsletter>>
>;
export type SaveNewsletterMutationBody = NewsletterRequest;
export type SaveNewsletterMutationError = ApiErrorResponse;

export const useSaveNewsletter = <
  TError = ApiErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof saveNewsletter>>,
    TError,
    { data: NewsletterRequest; params?: SaveNewsletterParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof saveNewsletter>>,
  TError,
  { data: NewsletterRequest; params?: SaveNewsletterParams },
  TContext
> => {
  const mutationOptions = getSaveNewsletterMutationOptions(options);

  return useMutation(mutationOptions);
};
export const saveDraft1 = (newsletterRequest: NewsletterRequest) => {
  return customInstance<NewsletterResponse>({
    url: `/api/admin/newsletters/save-draft`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: newsletterRequest,
  });
};

export const getSaveDraft1MutationOptions = <
  TError = ApiErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof saveDraft1>>,
    TError,
    { data: NewsletterRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof saveDraft1>>,
  TError,
  { data: NewsletterRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof saveDraft1>>,
    { data: NewsletterRequest }
  > = (props) => {
    const { data } = props ?? {};

    return saveDraft1(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type SaveDraft1MutationResult = NonNullable<
  Awaited<ReturnType<typeof saveDraft1>>
>;
export type SaveDraft1MutationBody = NewsletterRequest;
export type SaveDraft1MutationError = ApiErrorResponse;

export const useSaveDraft1 = <
  TError = ApiErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof saveDraft1>>,
    TError,
    { data: NewsletterRequest },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof saveDraft1>>,
  TError,
  { data: NewsletterRequest },
  TContext
> => {
  const mutationOptions = getSaveDraft1MutationOptions(options);

  return useMutation(mutationOptions);
};
export const createNewsletterWithMultipart = (
  createNewsletterWithMultipartBody: CreateNewsletterWithMultipartBody,
  params: CreateNewsletterWithMultipartParams,
) => {
  return customInstance<NewsletterResponse>({
    url: `/api/admin/newsletters/create`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: createNewsletterWithMultipartBody,
    params,
  });
};

export const getCreateNewsletterWithMultipartMutationOptions = <
  TError = ApiErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createNewsletterWithMultipart>>,
    TError,
    {
      data: CreateNewsletterWithMultipartBody;
      params: CreateNewsletterWithMultipartParams;
    },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createNewsletterWithMultipart>>,
  TError,
  {
    data: CreateNewsletterWithMultipartBody;
    params: CreateNewsletterWithMultipartParams;
  },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createNewsletterWithMultipart>>,
    {
      data: CreateNewsletterWithMultipartBody;
      params: CreateNewsletterWithMultipartParams;
    }
  > = (props) => {
    const { data, params } = props ?? {};

    return createNewsletterWithMultipart(data, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateNewsletterWithMultipartMutationResult = NonNullable<
  Awaited<ReturnType<typeof createNewsletterWithMultipart>>
>;
export type CreateNewsletterWithMultipartMutationBody =
  CreateNewsletterWithMultipartBody;
export type CreateNewsletterWithMultipartMutationError = ApiErrorResponse;

export const useCreateNewsletterWithMultipart = <
  TError = ApiErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createNewsletterWithMultipart>>,
    TError,
    {
      data: CreateNewsletterWithMultipartBody;
      params: CreateNewsletterWithMultipartParams;
    },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof createNewsletterWithMultipart>>,
  TError,
  {
    data: CreateNewsletterWithMultipartBody;
    params: CreateNewsletterWithMultipartParams;
  },
  TContext
> => {
  const mutationOptions =
    getCreateNewsletterWithMultipartMutationOptions(options);

  return useMutation(mutationOptions);
};
/**
 * @deprecated
 */
export const createNewsletterSimple = (
  params: CreateNewsletterSimpleParams,
) => {
  return customInstance<NewsletterResponse>({
    url: `/api/admin/newsletters/create-simple`,
    method: "POST",
    params,
  });
};

export const getCreateNewsletterSimpleMutationOptions = <
  TError = ApiErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createNewsletterSimple>>,
    TError,
    { params: CreateNewsletterSimpleParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createNewsletterSimple>>,
  TError,
  { params: CreateNewsletterSimpleParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createNewsletterSimple>>,
    { params: CreateNewsletterSimpleParams }
  > = (props) => {
    const { params } = props ?? {};

    return createNewsletterSimple(params);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateNewsletterSimpleMutationResult = NonNullable<
  Awaited<ReturnType<typeof createNewsletterSimple>>
>;

export type CreateNewsletterSimpleMutationError = ApiErrorResponse;

/**
 * @deprecated
 */
export const useCreateNewsletterSimple = <
  TError = ApiErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createNewsletterSimple>>,
    TError,
    { params: CreateNewsletterSimpleParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof createNewsletterSimple>>,
  TError,
  { params: CreateNewsletterSimpleParams },
  TContext
> => {
  const mutationOptions = getCreateNewsletterSimpleMutationOptions(options);

  return useMutation(mutationOptions);
};
export const createNewsletterJson = (newsletterRequest: NewsletterRequest) => {
  return customInstance<NewsletterResponse>({
    url: `/api/admin/newsletters/create-json`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: newsletterRequest,
  });
};

export const getCreateNewsletterJsonMutationOptions = <
  TError = ApiErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createNewsletterJson>>,
    TError,
    { data: NewsletterRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof createNewsletterJson>>,
  TError,
  { data: NewsletterRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof createNewsletterJson>>,
    { data: NewsletterRequest }
  > = (props) => {
    const { data } = props ?? {};

    return createNewsletterJson(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type CreateNewsletterJsonMutationResult = NonNullable<
  Awaited<ReturnType<typeof createNewsletterJson>>
>;
export type CreateNewsletterJsonMutationBody = NewsletterRequest;
export type CreateNewsletterJsonMutationError = ApiErrorResponse;

export const useCreateNewsletterJson = <
  TError = ApiErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof createNewsletterJson>>,
    TError,
    { data: NewsletterRequest },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof createNewsletterJson>>,
  TError,
  { data: NewsletterRequest },
  TContext
> => {
  const mutationOptions = getCreateNewsletterJsonMutationOptions(options);

  return useMutation(mutationOptions);
};
