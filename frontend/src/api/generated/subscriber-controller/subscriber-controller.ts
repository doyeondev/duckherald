/**
 * Generated by orval v6.31.0 🍺
 * Do not edit manually.
 * DuckHerald API
 * 뉴스레터 서비스 DuckHerald의 API 문서
 * OpenAPI spec version: v1.0.0
 */
import { useMutation, useQuery } from "@tanstack/react-query";
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult,
} from "@tanstack/react-query";
import type {
  ApiErrorResponse,
  CheckSubscriptionStatus200,
  CheckSubscriptionStatusParams,
  SubscriberRequest,
  SubscriberResponse,
  UnsubscribeParams,
} from "../../../types/api";
import { customInstance } from "../../../lib/apiClient";

export const subscribe = (subscriberRequest: SubscriberRequest) => {
  return customInstance<SubscriberResponse>({
    url: `/api/subscribers`,
    method: "POST",
    headers: { "Content-Type": "application/json" },
    data: subscriberRequest,
  });
};

export const getSubscribeMutationOptions = <
  TError = ApiErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof subscribe>>,
    TError,
    { data: SubscriberRequest },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof subscribe>>,
  TError,
  { data: SubscriberRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof subscribe>>,
    { data: SubscriberRequest }
  > = (props) => {
    const { data } = props ?? {};

    return subscribe(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type SubscribeMutationResult = NonNullable<
  Awaited<ReturnType<typeof subscribe>>
>;
export type SubscribeMutationBody = SubscriberRequest;
export type SubscribeMutationError = ApiErrorResponse;

export const useSubscribe = <
  TError = ApiErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof subscribe>>,
    TError,
    { data: SubscriberRequest },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof subscribe>>,
  TError,
  { data: SubscriberRequest },
  TContext
> => {
  const mutationOptions = getSubscribeMutationOptions(options);

  return useMutation(mutationOptions);
};
export const unsubscribe = (params: UnsubscribeParams) => {
  return customInstance<SubscriberResponse>({
    url: `/api/subscribers/unsubscribe`,
    method: "POST",
    params,
  });
};

export const getUnsubscribeMutationOptions = <
  TError = ApiErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof unsubscribe>>,
    TError,
    { params: UnsubscribeParams },
    TContext
  >;
}): UseMutationOptions<
  Awaited<ReturnType<typeof unsubscribe>>,
  TError,
  { params: UnsubscribeParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof unsubscribe>>,
    { params: UnsubscribeParams }
  > = (props) => {
    const { params } = props ?? {};

    return unsubscribe(params);
  };

  return { mutationFn, ...mutationOptions };
};

export type UnsubscribeMutationResult = NonNullable<
  Awaited<ReturnType<typeof unsubscribe>>
>;

export type UnsubscribeMutationError = ApiErrorResponse;

export const useUnsubscribe = <
  TError = ApiErrorResponse,
  TContext = unknown,
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof unsubscribe>>,
    TError,
    { params: UnsubscribeParams },
    TContext
  >;
}): UseMutationResult<
  Awaited<ReturnType<typeof unsubscribe>>,
  TError,
  { params: UnsubscribeParams },
  TContext
> => {
  const mutationOptions = getUnsubscribeMutationOptions(options);

  return useMutation(mutationOptions);
};
export const checkSubscriptionStatus = (
  params: CheckSubscriptionStatusParams,
  signal?: AbortSignal,
) => {
  return customInstance<CheckSubscriptionStatus200>({
    url: `/api/subscribers/status`,
    method: "GET",
    params,
    signal,
  });
};

export const getCheckSubscriptionStatusQueryKey = (
  params: CheckSubscriptionStatusParams,
) => {
  return [`/api/subscribers/status`, ...(params ? [params] : [])] as const;
};

export const getCheckSubscriptionStatusQueryOptions = <
  TData = Awaited<ReturnType<typeof checkSubscriptionStatus>>,
  TError = ApiErrorResponse,
>(
  params: CheckSubscriptionStatusParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof checkSubscriptionStatus>>,
        TError,
        TData
      >
    >;
  },
) => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getCheckSubscriptionStatusQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof checkSubscriptionStatus>>
  > = ({ signal }) => checkSubscriptionStatus(params, signal);

  return {
    queryKey,
    queryFn,
    staleTime: 10000,
    ...queryOptions,
  } as UseQueryOptions<
    Awaited<ReturnType<typeof checkSubscriptionStatus>>,
    TError,
    TData
  > & { queryKey: QueryKey };
};

export type CheckSubscriptionStatusQueryResult = NonNullable<
  Awaited<ReturnType<typeof checkSubscriptionStatus>>
>;
export type CheckSubscriptionStatusQueryError = ApiErrorResponse;

export const useCheckSubscriptionStatus = <
  TData = Awaited<ReturnType<typeof checkSubscriptionStatus>>,
  TError = ApiErrorResponse,
>(
  params: CheckSubscriptionStatusParams,
  options?: {
    query?: Partial<
      UseQueryOptions<
        Awaited<ReturnType<typeof checkSubscriptionStatus>>,
        TError,
        TData
      >
    >;
  },
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getCheckSubscriptionStatusQueryOptions(params, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
